<html>
<head>
</head>
<h1>MutantVM2 GUI</h1>
<canvas id="mainCanvas" width="500" height="500" style="border:1px solid #c3c3c3;">
Your browser does not support the canvas element.
</canvas>
<canvas id="hiddenCanvas" width="20" height="20" hidden=true style="border:1px solid #c3c3c3;">
Your browser does not support the canvas element.
</canvas>
<script type="text/javascript">
//All code protected by the GPL. copiright 2009,2012 Usmar A Padow (amigojapan) usmpadow@gmail.com & Greg Cox
//global vars
var shipsprite;
var surf1=document.getElementById("mainCanvas");
var mainContext = surf1.getContext('2d');
var surf2=document.getElementById("hiddenCanvas");
var hiddenContext = surf2.getContext('2d');
larray= new Array();//lazer array

function randint(minimum,maximum) {
	return Math.floor(Math.random()*(maximum-minimum))+minimum;
}

function clone(obj) {
    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        var copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        var copy = [];
        var i = 0;
        var len = obj.length;
        for (i = 0; i < len; ++i) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        var copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

Quadrant = new Object();
Quadrant.init2=function(top,left,quadsize){
	this.ships= new Array();
	this.top= top;
	this.left=left;
	this.quadsize=quadsize;
}
Quadrant.get_top=function(){
	return this.top;
}
Quadrant.get_left=function(){
	return this.left;
}
Quadrant.get_bottom=function(){
	return this.top+this.quadsize;
}
Quadrant.get_right=function(){
	return this.left+this.quadsize;
}
Board = new Object();
Board.init2=function(quadsize,surf) {
	this.quadsize=quadsize;
	columns=Math.ceil(surf.width/quadsize);
	rows=Math.ceil(surf.height/quadsize);
	this.quadlist= new Array();
	for(c1=0;c1<rows;c1++) {
		onerow= new Array();
		for(c2=0;c2<columns;c2++){
			quadobj=clone(Quadrant);//this should inherit from Quadrant
			quadobj.init2(c2*quadsize,c1*quadsize,quadsize);
			onerow.push(quadobj);
		}
		this.quadlist.push(onerow);
	}
}
function get_quadnumber(xoryval,quadsize) {
	return Math.floor(xoryval/quadsize);
}
lazer = new Object();
//ball.init2(randint(0,99),randint(0,99),randint(0,360),randint(0,100),b);
lazer.init2=function(x1,y1,x2,y2,cycles,color){
	this.x1=x1;
	this.y1=y1;
	this.x2=x2;
	this.y2=y2;
	this.cycles=cycles;//how mny cycles the lazer should last
	this.color=color;//the color of the lazer
}
	
bp = new Object();
//ball.init2(randint(0,99),randint(0,99),randint(0,360),randint(0,100),b);
bp.init2=function(x,y,angle,speed,board,shipname,prog){
	this.angle=angle;
	this.speed=speed;
	this.x=x;
	this.y=y;
	this.lines=prog;
	this.shields=100;//100 percent
	this.energy=100;//100 percent
	this.shieldsup=false;
	this.cloaked=false;
	this.shipname=shipname;
	this.IP=0;//Instruction Pointer
	this.GOSUBstack= new Array();
	this.setdirection(angle,speed);
	this.xfine=x*100;
	this.yfine=y*100;
	this.quadsize=b.quadsize;
	
	this.newrow=0;
	this.newcolumn=0;
	this.counter=0;

	this.for_itteration= new Array();
	this.forend= new Array();
	this.forln= new Array();
	this.namespace= new Object();

	
	//place ship in quadrant
	//print x, this.quadsize
	this.quadrownumber=get_quadnumber(x,this.quadsize);
	this.quadcolumnnumber=get_quadnumber(y,this.quadsize);
	//print "this.quadrownumber ", this.quadrownumber, "this.quadcolumnnumber", this.quadcolumnnumber,"len(board.quadlist)",len(board.quadlist),"len(board.quadlist[this.quadrownumber])",len(board.quadlist[this.quadrownumber]), "x ", x, "y ", y, "this.quadsize ", this.quadsize
	//board.quadlist[this.quadrownumber][this.quadcolumnnumber].ships.push(this)
	board.quadlist[this.quadrownumber][this.quadcolumnnumber].ships.push(this);
	this.angle=angle;
	this.speed=speed;
	this.x=x;
	this.y=y;
	this.setdirection(angle,speed);
	this.xfine=x*100;
	this.yfine=y*100;
	this.quadsize=b.quadsize;
	
	this.newrow=0;
	this.newcolumn=0;
	this.counter=0;

	
	//place ship in quadrant
	//print x, this.quadsize
	this.quadrownumber=get_quadnumber(x,this.quadsize);
	this.quadcolumnnumber=get_quadnumber(y,this.quadsize);
	//print "this.quadrownumber ", this.quadrownumber, "this.quadcolumnnumber", this.quadcolumnnumber,"len(board.quadlist)",len(board.quadlist),"len(board.quadlist[this.quadrownumber])",len(board.quadlist[this.quadrownumber]), "x ", x, "y ", y, "this.quadsize ", this.quadsize
	//board.quadlist[this.quadrownumber][this.quadcolumnnumber].ships.append(this)
	var ship=this;
	board.quadlist[this.quadrownumber][this.quadcolumnnumber].ships.push(ship);
}
bp.setdirection=function(angle,speed) {
		this.xspeed=Math.round(speed*Math.cos(angle*Math.PI/180));//fixed?bug, this is resulting in NaN
		this.yspeed=Math.round(speed*Math.sin(angle*Math.PI/180)); // *Math.PI/180 converts degrees to radians
}
bp.bounce=function(wall){
	if(wall=="right")
		nail=180;
	if(wall=="left")
		nail=0;
	if(wall=="top")
		nail=270;
	if(wall=="bottom")
		nail=90;
	flipedangle=this.angle-180;
	if(flipedangle<0)
		flipedangle=flipedangle+360;//converts negtive angles to positive angles
	alpha=nail-flipedangle;//I dont know how to get alpha
	newangle=nail+alpha;
	this.setdirection(newangle,this.speed);
	this.angle=newangle;
}
bp.update1=function(surf1,barray) {
	if(this.energy<100) this.energy+=1;//energy regeneration
	if(this.shieldsup==true) this.energy-=0.1;//takes 0.1% of energy per cycle to keep the shields up
	if(this.cloaked==true) this.energy-=0.5;//takes 0.5% energy per cycle
	//surf1.set_at((self.x, self.y), (0,0,0))
	//canvas
	newxfine=this.xfine + this.xspeed;
	newyfine=this.yfine + this.yspeed;
	newx=Math.round(newxfine/100);
	newy=Math.round(newyfine/100);
	//move back into area if it goes out
	if(newx>=surf1.width)//canvas
		newx=surf1.width-1;//canvas
	if(newx<0)
		newx=0;
	if(newx==surf1.width-1)//canvas
		this.bounce("right");
	if(newx==0)
		this.bounce("left");
		//this.xspeed=-this.xspeed
	if(newy>=surf1.height)//canvas
		newy=surf1.height-1;//canvas
	if(newy<0)
		newy=0; 
	if(newy==surf1.height-1)//canvas
		this.bounce("bottom");
	if(newy==0)
		this.bounce("top");
	this.x=newx;
	this.y=newy;
	this.xfine=newxfine;
	this.yfine=newyfine;	
	//ship program execution
	try{
		SpecialStatement=false;	
		GOTO_OR_RETURN=false;	
		//SCAN_QUADRANT()
		//sets namespace.found to true if other ship is in quadrant, false if not
		//if a ship is found this.namespace.othership_x this.namespace.othership_y this.namespace.othership_speed this.namespace.othership_angle are set
		//takes 0.0005% of energy
		//cannot detect cloaked ships
		if(this.lines[this.IP].indexOf("SCAN_QUADRANT()")!=-1) {
			SpecialStatement=true;
			this.namespace.FOUND=false;
			this.othership=undefined;
			for(ship in barray) {
				if(barray[ship]==this) continue;//skip currect ship
				if(get_quadnumber(this.x,b.quadsize)==get_quadnumber(barray[ship].x,b.quadsize) && get_quadnumber(this.y,b.quadsize)==get_quadnumber(barray[ship].y,b.quadsize)) {//same quadrant
					if(barray[ship].cloaked==true) break;//skip cloaked ships
					this.namespace.FOUND=true;
					this.namespace.othership_x=barray[ship].x;
					this.namespace.othership_y=barray[ship].y; 
					this.namespace.othership_speed=barray[ship].speed;
					this.namespace.othership_angle=barray[ship].angle;
					this.othership=barray[ship];
					break;
				}
			}
		}	
		//FIRE();//fires on last ship found on scan, you cannoy fire while shields are up<BR>
		//Every shot takes 10% of energy,does 20% damage to the  other ship's power supply,
		//if shields are up, if shields are down, it will have a 50% possibility of destroying the ship
		if(this.lines[this.IP].indexOf("FIRE()")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			this.energy-=10;
			if(this.othership!=undefined) {
				//add lazer
				l=clone(lazer);
				l.init2(this.x,this.y,this.othership.x, this.othership.y,100,"black");
				larray.push(l);
				if(this.othership.shieldsup && this.othership.energy>0){//if shields are up
					this.othership.energy-=20;
				} else { //if shields are down, it will have a 50% possibility of destroying the ship
					var number=randint(0,100);
					if(number>50) {//fifty percent posibility
						for(bship in barray) {
							if(barray[bship]==this.othership) barray.splice(bship,1);
							//later add an array of destroyed ships to keep score
						}
					}
				}
			}
		}
		//TURN_RIGHT(degrees);//turns clockwise
		//takes 0.0001% of energy per degree
		if(this.lines[this.IP].indexOf("TURN_RIGHT(")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			var myArray = str.match(/TURN_RIGHT\((\w*)\)/g)
			degrees = myArray[1];
			this.energy-=0.0001*degrees;
			this.angle+=degrees;
			this.setdirection(this.angle,this.speed);
		}
		//TURN_LEFT(degrees);//turns counter clockwise
		//takes 0.0001% of energy per degree
		if(this.lines[this.IP].indexOf("TURN_LEFT(")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			var myArray = str.match(/TURN_LEFT\((\w*)\)/g)
			degrees = myArray[1];
			this.energy-=0.0001*degrees;
			this.angle-=degrees;
			this.setdirection(this.angle,this.speed);
		}

		//FOWARD_THRUSTERS();//accelerate
		//takes 0.0005% of energy per unit of speed
		if(this.lines[this.IP].indexOf("FOWARD_THRUSTERS()")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			this.energy-=0.0005;
			this.speed+=1;
			this.setdirection(this.angle,this.speed);
		}
		//FULL_STOP();//halt
		//takes 0.0005% energy
		if(this.lines[this.IP].indexOf("FULL_STOP()")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			this.energy-=0.0005;
			this.speed=0;
		}
		
		//SHIELDS_UP();//route energy to shields
		//takes 0.1% of energy per cycle to keep the shields up
		if(this.lines[this.IP].indexOf("SHIELDS_UP()")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			this.shieldsup=true;
		}
		//SHIELDS_DOWN();//disengage shields
		//free
		if(this.lines[this.IP].indexOf("SHIELDS_DOWN()")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			this.shieldsup=false;
		}
		//CLOAK();//cannot be detected in quadrant scans
		//takes 0.5% energy per cycle
		if(this.lines[this.IP].indexOf("CLOAK()")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			this.cloaked=true;
		}
		//UNCLOAK();
		//free
		if(this.lines[this.IP].indexOf("UNCLOAK()")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			this.cloaked=false;
		}

		if(this.lines[this.IP].indexOf("GOSUB")!=-1) {// this is a GOSUB statement
			SpecialStatement=true;
			var labelname=this.lines[this.IP].substr(6,this.lines[this.IP].length-1);
			//find label
			this.GOSUBstack.push(this.IP+1);//add one for it to return one line after the GOSUB so it doesnt become an eternal loop
			for(var linecounter=0;linecounter<this.lines.length-1;linecounter++) {
				//if(this.lines[this.IP].indexOf(labelname)!=-1) {
					if(this.lines[linecounter].indexOf(labelname)==0) {//if the label is the first part of the line
					this.IP=linecounter;
					break;
				}
				
			} 
		}
		if(this.lines[this.IP].indexOf("RETURN")!=-1) {// this is a goto statement
			GOTO_OR_RETURN=true;//do not increment IP
			SpecialStatement=true;
			var tmp=this.GOSUBstack.pop();
			if(tmp==undefined) alert("Ship:"+this.shipname+" Line #:"+this.IP+"\n"+"Error, RETURN encountered with no more GOSUB stack");
			this.IP=tmp;
		}

	
		
		//case 'F':        // FOR X=10 TO 15
		if(this.lines[this.IP].indexOf("FOR")!=-1) {// this is a FOR statement, Later I must add the STEP option
			SpecialStatement=true;//dont eval this line
			//char varname; int start; int end;
			var varname, start, end;
			//sscanf(OneLine,"FOR %c=%i TO %i",&varname,&start,&end);
			var str = this.lines[this.IP];
			//var re = new RegExp("FOR *(\w*) *= *(\w*) *TO *(\w*)", "g");
			//var myArray = str.match(re);
			var myArray = str.split(/FOR *(\w*) *= *(\w*) *TO *(\w*)/g)
			if(myArray==null) alert("Ship:"+this.shipname+" Line #:"+this.IP+"\n"+"FOR loop malformed, read documentation");
			varname=myArray[1];
			start=myArray[2];
			end=myArray[3];
			this.for_itteration[varname]=start;
			this.forend[varname]=end;
			this.forln[varname]=this.IP;
			this.namespace[varname]=start;
		}
		//case 'N':        // NEXT
		if(this.lines[this.IP].indexOf("NEXT")!=-1) {// this is a FOR statement
			SpecialStatement=true;//dont eval this line
			//sscanf(OneLine,"NEXT %c",&varname);
			var str = this.lines[this.IP];
			var myArray = str.split(/NEXT *(\w*)/g)
			varname=myArray[1];
			if(this.for_itteration[varname]<this.forend[varname]) {//for loop has not ended
					this.for_itteration[varname]++;//increment itteration number;
					this.namespace[varname]=this.for_itteration[varname];
					this.IP=this.forln[varname];//goto beginning of for loop
			}
		}
		
	
		if(this.lines[this.IP].indexOf("GOTO")!=-1) {// this is a goto statement
			SpecialStatement=true;
			GOTO_OR_RETURN=true;//do not increment IP
			var labelname=this.lines[this.IP].substr(5,this.lines[this.IP].length-1);
			//find label
			for(var linecounter=0;linecounter<this.lines.length-1;linecounter++) {
				//if(this.lines[this.IP].indexOf(labelname)!=-1) {
				if(this.lines[linecounter].indexOf(labelname)==0) {//if the label is the first part of the line
					this.IP=linecounter;
					break;
				}
				
			} 
		}
		if(this.lines[this.IP].indexOf("IF_CONDITION_TRUE THEN")!=-1) {// this is a goto statement
			SpecialStatement=true;
			if(this.namespace.CONDITION) {
				GOTO_OR_RETURN=true;//do not increment IP
				var labelname=this.lines[this.IP].substr(23,this.lines[this.IP].length-1);
				//find label
				for(var linecounter=0;linecounter<this.lines.length-1;linecounter++) {
					//if(this.lines[this.IP].indexOf(labelname)!=-1) {
					if(this.lines[linecounter].indexOf(labelname)==0) {//if the label is the first part of the line
						this.IP=linecounter;
						break;
					}
					
				} 
			}
		}

		//Label, make it not eval
		if(this.lines[this.IP].indexOf(":")!=-1) {// this is a label statement
				SpecialStatement=true;
		}
		if(!SpecialStatement) eval(this.lines[this.IP]);//executes the next line
		//increment IP or loop back to beginning when progeam ends
		if(this.IP<this.lines.length-2) {
			if(!GOTO_OR_RETURN) this.IP++; 
		} else {
			 this.IP=0;
			 this.GOSUBstack= new Array();
		}
	} catch (error) {
		alert("Ship:"+this.shipname+" Line #:"+this.IP+"\n"+error);
	}

	//draw ship
	//mainContext.clearRect(lastXpos, lastYpos, lastWidth, lastHeight);
	/*fix rotation later
	hiddenContext.save();
	hiddenContext.clearRect(0, 0, surf2.width, surf2.height);
    hiddenContext.translate(shipsprite.width * 0.5, shipsprite.height * 0.5);
    // Perform the rotation
    hiddenContext.rotate(DegToRad(this.angle));
    // Translate back to the top left of our image
    hiddenContext.translate(-shipsprite.width * 0.5, -shipsprite.height * 0.5);
    // Finally we draw the image
    //hiddenContext.drawImage(shipsprite, 0, 0);
    */
	hiddenContext.clearRect(0, 0, surf2.width, surf2.height);
	hiddenContext.fillStyle="blue";
	hiddenContext.strokeStyle="black";
	hiddenContext.beginPath();
	hiddenContext.arc(5,5,5,0,Math.PI*2,true);
	hiddenContext.closePath();
	hiddenContext.fill();
	hiddenContext.stroke();
	hiddenContext.moveTo(5,5);
	hiddenContext.lineTo(10,5);
	hiddenContext.stroke();
	//draw energy bar    energy/5 will give 20 pixels formula is bignumber/small number=n     pixels=bignumber/n
	hiddenContext.beginPath();
	if(this.energy>70) color="green";
	if(this.energy>40) color="yellow";
	if(this.energy<40) color="red";	
	hiddenContext.strokeStyle="black";
	hiddenContext.moveTo(0,15);
	hiddenContext.lineTo(this.energy/10,15);
	//hiddenContext.strokeStyle="green";
	hiddenContext.stroke();

    //iddenContext.translate(-shipsprite.width * 0.5, -shipsprite.height * 0.5);
	//Get the image data from the hidden context
	var rimage = hiddenContext.getImageData(0, 0, surf2.width, surf2.height);
	//flip the back context back to center - or not, I haven't decided how to optimize this yet.
	//hiddenContext.restore();
	//transfer the image to your main context
	mainContext.putImageData(rimage, this.x, this.y);

	//if ship!=this:
	//if this not in currentquad.ships:
	/*Destroy other ship
	for(ship in currentquad.ships) {
		//delete another ship
		//currentquad.ships.remove(ship)
		if(currentquad.ships[ship]!=this) {
			//if ship in barray://for some reason there seem to be some hidden ships, this is a quick fix<== the need for this seems to have disapeared after I removed the ships from both the barray and the uadrants, I think they were conflicting.
			//barray.remove(ship)
			for(bship in barray) {
				if(barray[bship]==currentquad.ships[ship]) barray.splice(bship,1);
			}
			//currentquad.ships.remove(ship)
			currentquad.ships.splice(ship,1);//remove this ship , if it doesnt work try substacting 1 from ship or change ship2 to ship
			//del ship
			break;
		}
	}
	*/
}
//pygame.init()
//canvas screen = pygame.display.set_mode((100, 100))
//pygame.display.set_caption('mutantVM GUI')
 
//#Create The Backgound
//surf1 = pygame.Surface(screen.get_size())
//surf1.fill((0, 0, 0))
//surf1 = surf1.convert()
//var surf1=document.getElementById("myCanvas");
b=clone(Board);
b.init2(100,surf1);
barray= new Array();//ship array

/*
for(var count=0;count<10;count++) {
	ball=clone(bp);
	ball.init2(randint(0,surf1.width),randint(0,surf1.height),randint(0,360),randint(0,100),b);
	barray.push(ball);
}
*/
function parser(program) {
	lines=program.split(";");
	return lines
}
/*
ball=clone(bp);
var prog = new Array();
program1string="this.angle+=1;"
prog=parser(program1string);
ball.init2(randint(0,surf1.width),randint(0,surf1.height),randint(0,360),randint(0,100),b,"turning ship",prog);
barray.push(ball);

ball=clone(bp);
var prog = new Array();
program1string="this.angle-=1;"
prog=parser(program1string);
ball.init2(randint(0,surf1.width),randint(0,surf1.height),randint(0,360),randint(0,100),b,"turning ccw ship",prog);
barray.push(ball);


ball=clone(bp);
var prog = new Array();
//program1string="FOR X = 1 TO 3;alert(this.namespace.X);NEXT X;"
program1string='GOSUB SubroutineB;GOSUB SubroutineA;GOTO end;SubroutineA:;alert("Hey kids, Im in Subroutine A");RETURN;SubroutineB:;alert("Hey kids, Im in Subroutine B");RETURN;end:;';
prog=parser(program1string);
ball.init2(randint(0,surf1.width),randint(0,surf1.height),randint(0,360),randint(0,100),b,"gosub ship",prog);
barray.push(ball);

ball=clone(bp);
var prog = new Array();
program1string='this.namespace.CONDITION=true;IF_CONDUTION_TRUE THEN lblTRUE;alert("false");GOTO end;lblTRUE:;alert("true");end:;';
prog=parser(program1string);
ball.init2(randint(0,surf1.width),randint(0,surf1.height),randint(0,360),randint(0,100),b,"IF ship",prog);
barray.push(ball);
*/
for(sc=0;sc<10;sc++) {
ball=clone(bp);
var prog = new Array();
program1string='SHIELDS_UP();FOR X = 0 TO 100;FOWARD_THRUSTERS();NEXT X';
prog=parser(program1string);
ball.init2(randint(0,surf1.width),randint(0,surf1.height),randint(0,360),0,b,"dummy ship",prog);
barray.push(ball);
}
for(sc=0;sc<10;sc++) {
ball=clone(bp);
var prog = new Array();
program1string='FOR X = 0 TO 100;FOWARD_THRUSTERS();SCAN_QUADRANT();this.namespace.CONDITION=this.namespace.FOUND;IF_CONDITION_TRUE THEN shoot;;NEXT X;shoot:;FIRE();NEXT X';
prog=parser(program1string);
ball.init2(randint(0,surf1.width),randint(0,surf1.height),randint(0,360),0,b,"predator ship",prog);
barray.push(ball);
}

//b=bp(27,35,1,1)
//b1=bp(57,93,1,1)

//while 1:
function sleep(millis) {
var date = new Date();
var curDate = null;

do { curDate = new Date(); } 
while(curDate-date < millis);
} 
function Update() {
	//surf1.lock()
	// Clear the canvas to White
    mainContext.fillStyle = "rgb(255,255,255)";
    mainContext.fillRect(0, 0, surf1.width, surf1.height);
    //draw quadrants
    mainContext.strokeStyle="blue";
	quadsize=b.quadsize;
	mainContext.beginPath();
	for(x=0;x<surf1.width;x+=quadsize){
		mainContext.moveTo(x,0);
		mainContext.lineTo(x,surf1.height);
		mainContext.stroke();
	}
	for(y=0;y<surf1.height;y+=quadsize){
		mainContext.moveTo(0,y);
		mainContext.lineTo(surf1.width,y);
		mainContext.stroke();
	}
	//for(ball in barray) {
	for(ball=0;ball<barray.length;ball++) {
		//time.sleep(0.005)
		sleep(5);//milliseconds
		
		barray[ball].update1(surf1,barray)
	}
	for(l=0;l<larray.length;l++) {
		//time.sleep(0.005)
		sleep(5);//milliseconds
		larray[l].cycles-=1;
		if(larray[l].cycles<=0) {
			larray.splice(l,1);//remove lazer
		} else {
			mainContext.beginPath();
			mainContext.moveTo(larray[l].x1,larray[l].y1);
			mainContext.lineTo(larray[l].x2,larray[l].y2);
			mainContext.strokeStyle=larray[l].color;
			mainContext.stroke();
		}
	}
	//#b.update1(surf1)
	//#b1.update1(surf1)
	//surf1.unlock()
	//canvas screen.blit(surf1, (0, 0))
	//pygame.display.flip()
}
function DegToRad(d) {
    // Converts degrees to radians
    //(Math.PI / 180)
    return d * 0.0174532925199432957;
}
function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
    window.onload = func;
  } else {
    window.onload = function() {
      if (oldonload) {
        oldonload();
      }
      func();
    }
  }
}

addLoadEvent();
function loadingComplete(e) {
    // When the image has loaded begin the loop
    setInterval(Update,30);
}

addLoadEvent(function() {
	/* more code to run on page load */ 
	//var program1string="LBL1:;alert('here1');GOTO LBL1;alert('here2')";
	//programs.a= new Object();
	//programs.a.lines=parser(program1string);
	//var program2string="alert('program2 statement 1');alert('program2 statement 2');alert('program2 statement 3')";
	//programs.b= new Object();
	//programs.b.lines=parser(program2string);
	//fair_time_slicer();
	
	

    if (surf1.getContext) {
        // If Canvas is supported, load the image
        shipsprite = new Image();
        shipsprite.onload = loadingComplete;
        shipsprite.src = "images/shipright.png";
    }
});
</script>
</body>
</html>
